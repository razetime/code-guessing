# Brain-flak interpreter in Python
# soon to be added: proper debugging capability
# Flakhead society approved

def read_until_matching(s, start):
    stack_height = 0
    for idx, char in enumerate(s[start + 1 :]):
        match char:
            case "{":
                stack_height += 1
            case "}":
                stack_height -= 1
                if stack_height == -1:
                    return idx + start + 1
    return False


class Interpreter:
    left = []
    right = []
    main = []
    active = left
    index = 0
    current_value = 0
    running = False

    def reset(self):
        self.left = []
        self.right = []
        self.main = []
        self.active = self.left
        self.index = 0
        self.current_value = 0
        self.running = False

    def __init__(self, source):
        self.source = source

    def step(self):
        if not self.running:
            return False

        is_nilad = True
        match self.source[self.index : self.index + 2]:
            case "()":
                self.current_value += 1
            case "[]":
                self.current_value += len(self.active)
            case "{}":
                if self.active:
                    self.current_value += self.active.pop()
            case "<>":
                self.active = self.right if self.active == self.left else self.left
            case _:
                is_nilad = False
        if is_nilad:
            self.index += 2
        else:
            match self.source[self.index]:
                case "(":
                    self.main.append(("(", self.current_value, self.index))
                    self.current_value = 0
                case "[":
                    self.main.append(("[", self.current_value, self.index))
                    self.current_value = 0
                case "{":
                    self.main.append(("{", 0, self.index))
                    new_index = read_until_matching(self.source, self.index)
                    if not self.active or self.active[-1] == 0:
                        self.main.pop()
                        self.index = new_index
                case "<":
                    self.main.append(("<", self.current_value, self.index))
                    self.current_value = 0
                case ")":
                    _, inc, _ = self.main.pop()
                    self.active.append(self.current_value)
                    self.current_value += inc
                case "]":
                    _, inc, _ = self.main.pop()
                    self.current_value *= -1
                    self.current_value += inc
                case "}":
                    _, inc, idx = self.main.pop()
                    self.index = idx - 1
                    self.current_value += inc
                case ">":
                    _, inc, _ = self.main.pop()
                    self.current_value = inc
            self.index += 1

        if self.index >= len(self.source):
            self.running = False

        return True

    def run(self, input):
        self.reset()
        self.left = input
        self.active = self.left
        self.running = True
        while self.running:
            self.step()
        return self.active


for code, input in [
    ("(([]){[{}]{}([])}{})", [5, 69, 700, 8214]),  # sum stack
    ("({}{})", [0x12, 123]),  # add two numbers
    ("(())", []),  # 1
    ("<>((()))<>{({}[()])<>({}<>)<>(({})<>({}<>))<>}<>{}{}", [9]),  # Fibonacci
{({}<>)<>}<>([]){({}[()]<(([{}]()<((((((((()()()()()){}){}){})<>))()))>)<>){({}()<({}())>){({}()<({}(((()()())){}{}){}())>){({}()<({}()())>){({}()<({}(((()()()){}()){}){}())>){({}()<({}()())>){({}()<({}(((()()()()())){}{}){})>){(<{}({}()())>)}}}}}}}{}([]<({}<{({}<>)<>}<>>)>){({}[()]<({}<>)<>>)}{}{({}()<((({}[()])()))>)}{}<>>)}{}{<>({}<>)}', [])
]:
    print(Interpreter(code).run(input))
